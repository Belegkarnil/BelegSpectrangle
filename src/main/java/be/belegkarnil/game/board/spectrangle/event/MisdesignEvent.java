/*
 *  Copyright 2025 Belegkarnil
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 *  associated documentation files (the “Software”), to deal in the Software without restriction,
 *  including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
 *  so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all copies or substantial
 *  portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 *  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 *  OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package be.belegkarnil.game.board.spectrangle.event;

import be.belegkarnil.game.board.spectrangle.Board;
import be.belegkarnil.game.board.spectrangle.Game;
import be.belegkarnil.game.board.spectrangle.Piece;
import be.belegkarnil.game.board.spectrangle.Player;

import java.awt.Point;
import java.util.EventObject;

/**
 * This event is used to notify interested parties that an error of design, conception or implementation has occurred during a {@link Game}.
 *
 * @author Belegkarnil
 */
public class MisdesignEvent extends EventObject{
    /**
     * is the static constant that represents there are no exception (null)
     */
    public static final Exception NO_EXCEPTION  = null;
    /**
     * is the static constant that represents there are no piece (null)
     */
    public static final Piece NO_PIECE          = null;
    /**
     * is the static constant that represents there are no position (null)
     */
    public static final Point NO_POSITION       = null;

    /**
     * is the {link @Player} that generate the event
     */
    public final Player player;
    /**
     * is the board state when the event occurs
     */
    public final Board board;
    /**
     * is the piece that the player tried to play (or {@link MisdesignEvent#NO_PIECE})
     */
    public final Piece piece;
    /**
     * is the the position at which the player tried to play a piece (or {@link MisdesignEvent#NO_POSITION})
     */
    public final Point position;
    /**
     * is the exception generated when the player tried to play (or {@link MisdesignEvent#NO_EXCEPTION})
     */
    public final Exception exception;

    /**
     * Constructor designed for a timeout, only a board and a player, no piece are played
     * @param player is the player who has and generates a misconception event
     * @param board is the board related to the current game status
     */
    public MisdesignEvent(final Player player, final Board board) {
        this(player, board, NO_PIECE, NO_POSITION, NO_EXCEPTION);
    }

    /**
     * Constructor designed for a cheat event, the player uses a {@link Piece} he does not have
     * @param player is the player who has and generates a misconception event
     * @param board is the board related to the current game status
     * @param piece is the piece that te player tried to play (or {@link MisdesignEvent#NO_PIECE} is no piece where played)
     */
    public MisdesignEvent(final Player player, final Board board, final Piece piece) {
        this(player, board, piece, NO_POSITION, NO_EXCEPTION);
    }

    /**
     * Constructor designed for an invalid position. The player try to play on another {@link Piece}, out of the {@link Board}, not adjacent to a {@link Piece}, or the adjacent colors does not match.
     * @param player is the player who has and generates a misconception event
     * @param board is the board related to the current game status
     * @param piece is the piece that te player tried to play (or {@link MisdesignEvent#NO_PIECE} is no piece where played)
     * @param position is the position at which te player tried to play (or {@link MisdesignEvent#NO_POSITION} is there are not position)
     */
    public MisdesignEvent(final Player player, final Board board, final Piece piece, final Point position) {
        this(player, board, piece, position, NO_EXCEPTION);
    }

    /**
     * Constructor designed for exceptions, only a board, a player, and the generated exception.
     * @param player is the player who has and generates a misconception event
     * @param board is the board related to the current game status
     * @param exception is exception generated by the {@link be.belegkarnil.game.board.spectrangle.strategy.Strategy} implementation (or {@link MisdesignEvent#NO_EXCEPTION} if there are no exception)
     */
    public MisdesignEvent(final Player player, final Board board, final Exception exception) {
        this(player, board, NO_PIECE, NO_POSITION, exception);
    }

    /**
     * Generic constructor
     * @param player is the player who has and generates a misconception event
     * @param board is the board related to the current game status
     * @param piece is the piece that te player tried to play (or {@link MisdesignEvent#NO_PIECE} is no piece where played)
     * @param position is the position at which te player tried to play (or {@link MisdesignEvent#NO_POSITION} is there are not position)
     * @param exception is exception generated by the {@link be.belegkarnil.game.board.spectrangle.strategy.Strategy} implementation (or {@link MisdesignEvent#NO_EXCEPTION} if there are no exception)
     */
    private MisdesignEvent(final Player player, final Board board, final Piece piece, final Point position, final Exception exception) {
        super(player);
        this.player     = player;
        this.board      = board;
        this.piece      = piece;
        this.position   = position;
        this.exception  = exception;
    }
}
